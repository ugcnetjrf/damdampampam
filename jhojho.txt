index.html (updated)

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Daily Log</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>📓 Daily Log</h1>
      <button id="darkModeToggle">🌙</button>
    </div>

    <input type="text" id="searchInput" placeholder="Search entries..." />

    <textarea id="entry" placeholder="What did you do today?"></textarea>
    <button id="saveBtn">Save Entry</button>

    <h2>Past Entries</h2>
    <div id="entriesList"></div>
  </div>

  <script src="script.js"></script>
</body>
</html>


---

✅ styles.css (updated with dark mode and edits)

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Merriweather&display=swap');

:root {
  --bg: #f9f9fb;
  --text: #2e2e2e;
  --entry-bg: #f1f1f6;
  --btn-bg: #4f46e5;
  --btn-hover: #4338ca;
  --container-bg: white;
}

.dark-mode {
  --bg: #1e1e2f;
  --text: #f5f5f5;
  --entry-bg: #2c2c3f;
  --btn-bg: #6c63ff;
  --btn-hover: #5952e3;
  --container-bg: #2a2a3d;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: var(--bg);
  font-family: 'Inter', sans-serif;
  color: var(--text);
  padding: 2rem;
  line-height: 1.6;
  transition: background 0.3s, color 0.3s;
}

.container {
  max-width: 700px;
  margin: auto;
  background: var(--container-bg);
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 8px 24px rgba(0,0,0,0.05);
}

h1, h2 {
  font-family: 'Merriweather', serif;
  margin-bottom: 1rem;
}

textarea, input[type="text"] {
  width: 100%;
  padding: 1rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  resize: vertical;
  font-family: inherit;
  margin-bottom: 1rem;
  background: #fafafa;
}

input[type="text"] {
  background: #fff;
}

button {
  background-color: var(--btn-bg);
  color: white;
  padding: 0.75rem 1.25rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.2s ease;
  margin-right: 0.5rem;
}

button:hover {
  background-color: var(--btn-hover);
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.entry {
  background: var(--entry-bg);
  padding: 1rem;
  border-radius: 8px;
  margin-bottom: 1rem;
  position: relative;
}

.entry small {
  display: block;
  color: #777;
  margin-bottom: 0.5rem;
}

.entry-actions {
  margin-top: 0.5rem;
}

.edit-btn, .delete-btn {
  font-size: 0.85rem;
  background-color: transparent;
  border: 1px solid #aaa;
  color: inherit;
  margin-right: 0.5rem;
  padding: 0.3rem 0.6rem;
  border-radius: 4px;
  cursor: pointer;
}

.edit-btn:hover, .delete-btn:hover {
  background-color: #ddd;
}


---

✅ script.js (updated with edit, search, dark mode)

const entryInput = document.getElementById('entry');
const saveBtn = document.getElementById('saveBtn');
const entriesList = document.getElementById('entriesList');
const searchInput = document.getElementById('searchInput');
const darkModeToggle = document.getElementById('darkModeToggle');

let editingIndex = null;

function getEntries() {
  return JSON.parse(localStorage.getItem('dailyEntries')) || [];
}

function saveEntries(entries) {
  localStorage.setItem('dailyEntries', JSON.stringify(entries));
}

function loadEntries(filter = '') {
  const entries = getEntries();
  entriesList.innerHTML = '';

  entries
    .slice()
    .reverse()
    .filter(e => e.text.toLowerCase().includes(filter.toLowerCase()))
    .forEach(({ text, date }, index) => {
      const entryDiv = document.createElement('div');
      entryDiv.className = 'entry';
      entryDiv.innerHTML = `
        <small>${new Date(date).toLocaleString()}</small>


<p>${text}</p>
        <div class="entry-actions">
          <button class="edit-btn" data-index="${entries.length - 1 - index}">Edit</button>
          <button class="delete-btn" data-index="${entries.length - 1 - index}">Delete</button>
        </div>
      `;
      entriesList.appendChild(entryDiv);
    });

  bindEntryButtons();
}

function bindEntryButtons() {
  document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.dataset.index);
      const entries = getEntries();
      entryInput.value = entries[index].text;
      editingIndex = index;
      saveBtn.textContent = 'Update Entry';
    });
  });

  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.dataset.index);
      const entries = getEntries();
      entries.splice(index, 1);
      saveEntries(entries);
      loadEntries(searchInput.value);
    });
  });
}

saveBtn.addEventListener('click', () => {
  const text = entryInput.value.trim();
  if (text === '') return;

  const entries = getEntries();

  if (editingIndex !== null) {
    entries[editingIndex].text = text;
    entries[editingIndex].date = new Date().toISOString();
    editingIndex = null;
    saveBtn.textContent = 'Save Entry';
  } else {
    entries.push({ text, date: new Date().toISOString() });
  }

  saveEntries(entries);
  entryInput.value = '';
  loadEntries(searchInput.value);
});

searchInput.addEventListener('input', () => {
  loadEntries(searchInput.value);
});

// 🌙 Dark Mode
darkModeToggle.addEventListener('click', () => {
  document.body.classList.toggle('dark-mode');
  localStorage.setItem('darkMode', document.body.classList.contains('dark-mode'));
});

// On load, apply saved dark mode preference
if (localStorage.getItem('darkMode') === 'true') {
  document.body.classList.add('dark-mode');
}

// Initial load
loadEntries();

Index 

index.html (updated)

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Daily Log</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>📓 Daily Log</h1>
      <button id="darkModeToggle">🌙</button>
    </div>

    <input type="text" id="searchInput" placeholder="Search entries..." />

    <textarea id="entry" placeholder="What did you do today?"></textarea>
    <button id="saveBtn">Save Entry</button>

    <h2>Past Entries</h2>
    <div id="entriesList"></div>
  </div>

  <script src="script.js"></script>
</body>
</html>


---

✅ styles.css (updated with dark mode and edits)

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Merriweather&display=swap');

:root {
  --bg: #f9f9fb;
  --text: #2e2e2e;
  --entry-bg: #f1f1f6;
  --btn-bg: #4f46e5;
  --btn-hover: #4338ca;
  --container-bg: white;
}

.dark-mode {
  --bg: #1e1e2f;
  --text: #f5f5f5;
  --entry-bg: #2c2c3f;
  --btn-bg: #6c63ff;
  --btn-hover: #5952e3;
  --container-bg: #2a2a3d;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: var(--bg);
  font-family: 'Inter', sans-serif;
  color: var(--text);
  padding: 2rem;
  line-height: 1.6;
  transition: background 0.3s, color 0.3s;
}

.container {
  max-width: 700px;
  margin: auto;
  background: var(--container-bg);
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 8px 24px rgba(0,0,0,0.05);
}

h1, h2 {
  font-family: 'Merriweather', serif;
  margin-bottom: 1rem;
}

textarea, input[type="text"] {
  width: 100%;
  padding: 1rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  resize: vertical;
  font-family: inherit;
  margin-bottom: 1rem;
  background: #fafafa;
}

input[type="text"] {
  background: #fff;
}

button {
  background-color: var(--btn-bg);
  color: white;
  padding: 0.75rem 1.25rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.2s ease;
  margin-right: 0.5rem;
}

button:hover {
  background-color: var(--btn-hover);
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.entry {
  background: var(--entry-bg);
  padding: 1rem;
  border-radius: 8px;
  margin-bottom: 1rem;
  position: relative;
}

.entry small {
  display: block;
  color: #777;
  margin-bottom: 0.5rem;
}

.entry-actions {
  margin-top: 0.5rem;
}

.edit-btn, .delete-btn {
  font-size: 0.85rem;
  background-color: transparent;
  border: 1px solid #aaa;
  color: inherit;
  margin-right: 0.5rem;
  padding: 0.3rem 0.6rem;
  border-radius: 4px;
  cursor: pointer;
}

.edit-btn:hover, .delete-btn:hover {
  background-color: #ddd;
}


---

✅ script.js (updated with edit, search, dark mode)

const entryInput = document.getElementById('entry');
const saveBtn = document.getElementById('saveBtn');
const entriesList = document.getElementById('entriesList');
const searchInput = document.getElementById('searchInput');
const darkModeToggle = document.getElementById('darkModeToggle');

let editingIndex = null;

function getEntries() {
  return JSON.parse(localStorage.getItem('dailyEntries')) || [];
}

function saveEntries(entries) {
  localStorage.setItem('dailyEntries', JSON.stringify(entries));
}

function loadEntries(filter = '') {
  const entries = getEntries();
  entriesList.innerHTML = '';

  entries
    .slice()
    .reverse()
    .filter(e => e.text.toLowerCase().includes(filter.toLowerCase()))
    .forEach(({ text, date }, index) => {
      const entryDiv = document.createElement('div');
      entryDiv.className = 'entry';
      entryDiv.innerHTML = `
        <small>${new Date(date).toLocaleString()}</small>

<p>${text}</p>
        <div class="entry-actions">
          <button class="edit-btn" data-index="${entries.length - 1 - index}">Edit</button>
          <button class="delete-btn" data-index="${entries.length - 1 - index}">Delete</button>
        </div>
      `;
      entriesList.appendChild(entryDiv);
    });

  bindEntryButtons();
}

function bindEntryButtons() {
  document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.dataset.index);
      const entries = getEntries();
      entryInput.value = entries[index].text;
      editingIndex = index;
      saveBtn.textContent = 'Update Entry';
    });
  });

  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.dataset.index);
      const entries = getEntries();
      entries.splice(index, 1);
      saveEntries(entries);
      loadEntries(searchInput.value);
    });
  });
}

saveBtn.addEventListener('click', () => {
  const text = entryInput.value.trim();
  if (text === '') return;

  const entries = getEntries();

  if (editingIndex !== null) {
    entries[editingIndex].text = text;
    entries[editingIndex].date = new Date().toISOString();
    editingIndex = null;
    saveBtn.textContent = 'Save Entry';
  } else {
    entries.push({ text, date: new Date().toISOString() });
  }

  saveEntries(entries);
  entryInput.value = '';
  loadEntries(searchInput.value);
});

searchInput.addEventListener('input', () => {
  loadEntries(searchInput.value);
});

// 🌙 Dark Mode
darkModeToggle.addEventListener('click', () => {
  document.body.classList.toggle('dark-mode');
  localStorage.setItem('darkMode', document.body.classList.contains('dark-mode'));
});

// On load, apply saved dark mode preference
if (localStorage.getItem('darkMode') === 'true') {
  document.body.classList.add('dark-mode');
}

// Initial load
loadEntries();

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Daily Log</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>📓 Daily Log</h1>
      <button id="darkModeToggle">🌙</button>
    </div>

    <input type="text" id="searchInput" placeholder="Search entries..." />

    <textarea id="entry" placeholder="What did you do today?"></textarea>
    <button id="saveBtn">Save Entry</button>

    <h2>Past Entries</h2>
    <div id="entriesList"></div>
  </div>

  <script src="script.js"></script>
</body>
</html>

CSS

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Merriweather&display=swap');

:root {
  --bg: #f9f9fb;
  --text: #2e2e2e;
  --entry-bg: #f1f1f6;
  --btn-bg: #4f46e5;
  --btn-hover: #4338ca;
  --container-bg: white;
}

.dark-mode {
  --bg: #1e1e2f;
  --text: #f5f5f5;
  --entry-bg: #2c2c3f;
  --btn-bg: #6c63ff;
  --btn-hover: #5952e3;
  --container-bg: #2a2a3d;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: var(--bg);
  font-family: 'Inter', sans-serif;
  color: var(--text);
  padding: 2rem;
  line-height: 1.6;
  transition: background 0.3s, color 0.3s;
}

.container {
  max-width: 700px;
  margin: auto;
  background: var(--container-bg);
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 8px 24px rgba(0,0,0,0.05);
}

h1, h2 {
  font-family: 'Merriweather', serif;
  margin-bottom: 1rem;
}

textarea, input[type="text"] {
  width: 100%;
  padding: 1rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  resize: vertical;
  font-family: inherit;
  margin-bottom: 1rem;
  background: #fafafa;
}

input[type="text"] {
  background: #fff;
}

button {
  background-color: var(--btn-bg);
  color: white;
  padding: 0.75rem 1.25rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.2s ease;
  margin-right: 0.5rem;
}

button:hover {
  background-color: var(--btn-hover);
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.entry {
  background: var(--entry-bg);
  padding: 1rem;
  border-radius: 8px;
  margin-bottom: 1rem;
  position: relative;
}

.entry small {
  display: block;
  color: #777;
  margin-bottom: 0.5rem;
}

.entry-actions {
  margin-top: 0.5rem;
}

.edit-btn, .delete-btn {
  font-size: 0.85rem;
  background-color: transparent;
  border: 1px solid #aaa;
  color: inherit;
  margin-right: 0.5rem;
  padding: 0.3rem 0.6rem;
  border-radius: 4px;
  cursor: pointer;
}

.edit-btn:hover, .delete-btn:hover {
  background-color: #ddd;
}


Script 

const entryInput = document.getElementById('entry');
const saveBtn = document.getElementById('saveBtn');
const entriesList = document.getElementById('entriesList');
const searchInput = document.getElementById('searchInput');
const darkModeToggle = document.getElementById('darkModeToggle');

let editingIndex = null;

function getEntries() {
  return JSON.parse(localStorage.getItem('dailyEntries')) || [];
}

function saveEntries(entries) {
  localStorage.setItem('dailyEntries', JSON.stringify(entries));
}

function loadEntries(filter = '') {
  const entries = getEntries();
  entriesList.innerHTML = '';

  entries
    .slice()
    .reverse()
    .filter(e => e.text.toLowerCase().includes(filter.toLowerCase()))
    .forEach(({ text, date }, index) => {
      const entryDiv = document.createElement('div');
      entryDiv.className = 'entry';
      entryDiv.innerHTML = 
        <small>${new Date(date).toLocaleString()}</small>
        <p>${text}</p>
        <div class="entry-actions">
          <button class="edit-btn" data-index="${entries.length - 1 - index}">Edit</button>
          <button class="delete-btn" data-index="${entries.length - 1 - index}">Delete</button>
        </div>
      ;
      entriesList.appendChild(entryDiv);
    });

  bindEntryButtons();
}

function bindEntryButtons() {
  document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.dataset.index);
      const entries = getEntries();
      entryInput.value = entries[index].text;
      editingIndex = index;
      saveBtn.textContent = 'Update Entry';
    });
  });

  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const index = parseInt(btn.dataset.index);
      const entries = getEntries();
      entries.splice(index, 1);
      saveEntries(entries);
      loadEntries(searchInput.value);
    });
  });
}

saveBtn.addEventListener('click', () => {
  const text = entryInput.value.trim();
  if (text === '') return;

  const entries = getEntries();

  if (editingIndex !== null) {
    entries[editingIndex].text = text;
    entries[editingIndex].date = new Date().toISOString();
    editingIndex = null;
    saveBtn.textContent = 'Save Entry';
  } else {
    entries.push({ text, date: new Date().toISOString() });
  }

  saveEntries(entries);
  entryInput.value = '';
  loadEntries(searchInput.value);
});

searchInput.addEventListener('input', () => {
  loadEntries(searchInput.value);
});

// 🌙 Dark Mode
darkModeToggle.addEventListener('click', () => {
  document.body.classList.toggle('dark-mode');
  localStorage.setItem('darkMode', document.body.classList.contains('dark-mode'));
});

// On load, apply saved dark mode preference
if (localStorage.getItem('darkMode') === 'true') {
  document.body.classList.add('dark-mode');
}

// Initial load
loadEntries();

Updated index.html – Add Upload & Download Buttons

Add this below the <button id="saveBtn">Save Entry</button> line:

<div class="backup-controls">
  <button id="downloadBtn">📥 Download Data</button>
  <label class="upload-label">
    📤 Upload Data
    <input type="file" id="uploadInput" accept=".json" hidden />
  </label>
</div>

 Add Styles to styles.css

Add this at the end of your CSS file:

.backup-controls {
  margin-top: 1rem;
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.upload-label {
  background-color: var(--btn-bg);
  color: white;
  padding: 0.75rem 1.25rem;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.2s ease;
}

.upload-label:hover {
  background-color: var(--btn-hover);
}

.upload-label input {
  display: none;
}

Add Logic to script.js

At the bottom of the script, add this:

const downloadBtn = document.getElementById('downloadBtn');
const uploadInput = document.getElementById('uploadInput');

// 📥 Download all entries as a .json file
downloadBtn.addEventListener('click', () => {
  const entries = getEntries();
  const blob = new Blob([JSON.stringify(entries, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);

  const link = document.createElement('a');
  link.href = url;
  link.download = daily-log-backup-${new Date().toISOString().split('T')[0]}.json;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
});

// 📤 Upload a .json file to restore entries
uploadInput.addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  try {
    const text = await file.text();
    const importedEntries = JSON.parse(text);

    if (!Array.isArray(importedEntries)) throw new Error('Invalid format');

    const confirmed = confirm("Do you want to replace your current entries with this upload?");
    if (confirmed) {
      saveEntries(importedEntries);
      loadEntries(searchInput.value);
      alert('Entries restored successfully!');
    }
  } catch (err) {
    alert('Failed to import data. Make sure it’s a valid backup file.');
    console.error(err);
  }
});

 Updated Code for .txt Format

🔁 Replace the Download and Upload section in script.js with this:

Download all entries as .txt
downloadBtn.addEventListener('click', () => {
  const entries = getEntries();
  const content = entries
    .map(e => [${new Date(e.date).toLocaleString()}]\n${e.text})
    .join('\n\n---\n\n');

  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);

  const link = document.createElement('a');
  link.href = url;
  link.download = daily-log-${new Date().toISOString().split('T')[0]}.txt;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
});

// 📤 Upload .txt and parse into entries
uploadInput.addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  try {
    const text = await file.text();

    const entries = text.split('\n\n---\n\n').map(section => {
      const match = section.match(/^\[(.+?)\]\n([\s\S]*)$/);
      if (!match) throw new Error('Format error');
      return {
        date: new Date(match[1]).toISOString(),
        text: match[2].trim()
      };
    });

    const confirmed = confirm("Do you want to replace your current entries with this upload?");
    if (confirmed) {
      saveEntries(entries);
      loadEntries(searchInput.value);
      alert('Entries restored successfully!');
    }
  } catch (err) {
    alert('Failed to import data. Make sure the .txt file is in the correct format.');
    console.error(err);
  }
});

